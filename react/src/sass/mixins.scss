@import './fonctions.scss';
@import './variables.scss';
 


// ===== MIXINS DE TEXTE =====



// Transforme une map de textes et génère des media queries
@mixin texte-dynamique($selecteurs) {
    @each $selecteur, $tailles-ecran in $selecteurs {
        @each $taille-ecran, $proprietes in $tailles-ecran {
            @media screen and (min-width: $taille-ecran) {
                #{$selecteur} {
                    @if ($selecteur == svg) {
                        width: map-get($proprietes, taille);
                        height: map-get($proprietes, taille);
                    }
    
                    @else {
                        font-size: map-get($proprietes, taille);
                        margin-block-start: map-get($proprietes, taille) / 4;
                        margin-block-end: map-get($proprietes, taille) / 4;
    
                        // Ajouter les propriétés ajoutées dans variables.scss ici
                    }
                }
            }
        }
    }
}

// Remlpit automatiquement les informations génériques pour tout type de texte
// Fonctionne avec themer()
@mixin texte-general($theme, $element) {
    color: map-deep-get($theme, $element, "couleur");
    font-weight: map-deep-get($theme, $element, "poids");
    font-style: map-deep-get($theme, $element, "style");
}

@mixin desactiver-margin-block() {
    margin-block-start: 0;
    margin-block-end: 0;
}



// ===== MIXINS DE COULEUR =====



// Stylise plusieurs classe/balises prédéterminés d'après une map de thème
@mixin themer($theme) {
    // Styles de texte
    @include selection-texte {
        @include texte-general($theme, "texte");
    }

    .titre {
        @include texte-general($theme, "titre");
    }

    .sous-titre {
        @include texte-general($theme, "sous-titre");
    }

    svg {
        &, path {
            color: map-deep-get($theme, "icone", "couleur");
            fill: map-deep-get($theme, "icone", "couleur");   
        }
    }

    input {
        @include texte-general($theme, "texte");
    }

    a {
        @include texte-general($theme, "lien");

        &:hover {
            @include texte-general($theme, "lien-hover");
        }
    }

    // Boites
    background-color: map-deep-get($theme, "fond", "couleur-primaire");
}

/*
    Permet de faire un fondu entre des degrades ou des images
    Demande qu'un élément vide ayant la classe "classe-destination" soit dans le conteneur de base
    et que l'attribut transition change sur le conteneur original, le temps de l'animation
*/
@mixin fondu($duree, $classe-destination) {
    position: relative;
    background-size: 100% 100%;
    background-repeat: no-repeat;

    .#{$classe-destination} {
        content: "";
        position: absolute;
        top:0;
        left:0;
        @include pleine-taille;
        background-size: 100% 100%;
        background-repeat: no-repeat;
        opacity: 0;
        z-index: -1;
        @content;
    }

    &[transition="1"] {
        .#{$classe-destination} {
            animation: fondu-sortant $duree forwards;
        }
    }
}


/*
    Attribue la bonne couleur reliée à un domaine (dans la map $couleurs)
    Le domaine doit être pareil à la classe donnée à l'élément

    $classes-proprietes-map contient une map qui fait correspondre des classes enfant
    de l'élément principal à des propriétés CSS (color, background-color, etc)

    Si on passe une clé se nommant 'soi' dans $classes-proprietes-map, la propriété sera appliquée à l'élément lui-même


    Si $nouvelles-couleurs-selon-domaines est attribuée, à la place d'utiliser les couleurs de domaines normales
    on utilise ses couleurs qu'on réattribue par rapport à chaque domaine
*/
@mixin couleurs-domaines($classes-proprietes-map, $nouvelles-couleurs-selon-domaines: ()) {
    $map-couleurs-domaines: null;

    // Itérer chaque classe enfant/propriété dans la map reçue
    @each $classe, $propriete in $classes-proprietes-map {

        // Si on n'utilise pas les couleurs conventionnelles
        @if length($nouvelles-couleurs-selon-domaines) > 0 {
            $map-couleurs-domaines: $nouvelles-couleurs-selon-domaines;
        }

        @else {
            $map-couleurs-domaines: map-get($couleurs, domaines);
        }

        // Itérer chaque couleur disponible dans les domaines
        @each $domaine, $couleur in $map-couleurs-domaines {
            @if ($classe == 'soi') {
                &.#{$domaine} {
                    #{$propriete}: $couleur;
                }
            }

            @else {
                // L'élément original doit avoir une classe correspondant aux différents domaines
                // (voir Enseignant.scss pour exemple)
                &.#{$domaine} {

                    // Sélection de la classe enfant
                    .#{$classe} {

                        // Application de la couleur à la propriété
                        
                        // Si on passe plusieurs propriétés dans $propriete
                        @if type-of($propriete) == 'list' {
                            @each $_propriete in $propriete {
                                // Elles doivent ABSOLUMENT avoir la priorité
                                #{$_propriete}: $couleur !important;
                            }
                        }

                        @else {
                            #{$propriete}: $couleur;
                        }
                    }
                }
            }
        }
    }
}

// Attribue des couleurs aléatoires de domaine à une propriété donnée aux enfants
@mixin proprietes-aleatoires($valeurs, $propriete, $nombre-enfants: 100) {
    @for $element from 1 through $nombre-enfants {
        &:nth-of-type(#{$element}) {
            #{$propriete}: nth($valeurs, random(length($valeurs)));
        }
    }
}



// ===== MIXINS DE HOVER & TRANSITIONS =====


// Transition pour le texte qui met des bordures sur le côté sur hover
@mixin hover-bordures-cotes {
    @include tablette {
        transition: border 0.35s ease;
        border-left: 3px solid transparent;
        border-right: 3px solid transparent;
        padding: 0 11.2px;
        cursor: pointer;
    
        &:hover {
            transition: border 0.35s ease;
            border-left: 3px solid map-get($couleurs, clair);
            border-right: 3px solid map-get($couleurs, clair);
        }
    }
}

// Raccourci pour une transition de base
@mixin transition-base(
    $propriete: all, 
    $courbe: cubic-bezier(.99,-0.01,.65,.73), 
    $duree: .5s
) {
    transition: $propriete $courbe $duree;
}

// Styles de base de hover sur un item d'une liste
// $element-hovered permet de specifier sur quel élément le hover doit se produire
@mixin hover-item(
    $specifier-transform: false, 
    $element-hovered: null,
    $echelle: 1.05,
    $duree: .05s
) {
    @include tablette {
        @if ($element-hovered == null) {
            @if $specifier-transform == true {
                transition: transform linear $duree;
            }
            @else {
                transition: all linear $duree;
            }

            &:hover {
                transform: scale($echelle);
            }
        }
        @else {
            #{$element-hovered} {
                @if $specifier-transform == true {
                    transition: transform linear $duree;
                }
                @else {
                    transition: all linear $duree;
                }
    
                &:hover {
                    transform: scale($echelle);
                }
            }
        }
    }
}



// ===== MIXINS RANDOMS =====



// Gère l'ouverture de différentes boites d'après des classes
// Insérer dans la boite à ouvrir/fermer
@mixin gerer-ouverture($valeur-quand-ouvert: flex) {
    &[ouvert="true"] {
        display: $valeur-quand-ouvert;
    }

    &[ouvert="false"] {
        display: none;
    }
}

@mixin pleine-taille() {
    width: 100%;
    height: 100%;
}

// Cache la barre de défilement par défaut des browsers
@mixin cacher-barre-defilement() {
    &::-webkit-scrollbar {
        display: none;
    }

    -ms-overflow-style: none;
    scrollbar-width: none;
}

// Fait un rond d'après une taille
@mixin rond($taille) {
    content: "";
    border-radius: 50%;
    width: $taille;
    aspect-ratio: 1;
}

@mixin etiquette() {
    background: rgba(0, 0, 0, 0.377);
    border-radius: 20px;
    padding: 5%;
}

@mixin padding-auto() {
    padding-top: map-get($decalage-pages, mobile);
    padding-bottom: map-get($decalage-pages, mobile);
    @include tablette {
        padding-top: calc(map-get($decalage-pages, tablette) / 2);
        padding-bottom: calc(map-get($decalage-pages, tablette) / 2);
    }
    @include ordinateur {
        padding-top: calc(map-get($decalage-pages, ordinateur) / 2);
        padding-bottom: calc(map-get($decalage-pages, ordinateur) / 2);
    }
}



// ===== MIXINS DE SECTIONS =====



// Bulle avec le coin bas droit plus prononcé. Comprend une image
@mixin bulle() {
    aspect-ratio: 1;
    border-radius: 50% 50% 10px 50%;

    // img {
    //     @include pleine-taille;
    // }
}

@mixin carte() {
    border-radius: 20px;

    padding: 30px;
}

@mixin bordures-coins-diagonales($taille, $couleur) {
    background:
        // Gauche
        linear-gradient($couleur $taille, transparent 0 calc(100% - $taille)) 0 0 / 4px 100%,
        // Droite
        linear-gradient(transparent 0 calc(100% - $taille), $couleur 0) 100% 0 / 4px 100%,
        // Haut
        linear-gradient(to right, $couleur $taille, transparent 0 calc(100% - $taille)) 0 0 / 100% 4px,
        // Bas
        linear-gradient(to right, transparent 0 calc(100% - $taille), $couleur 0) 0 100% / 100% 4px
    ;
    background-repeat: no-repeat;
}

@mixin page($ajuster-contenu: false, $padding-bottom: true) {
    @include pleine-taille;
    display: flex;
    box-sizing: border-box;

    // Padding minimal
    padding: 40px 0;

    @if $ajuster-contenu {
        padding: map-get($decalage-pages, mobile) 0;
    }

    @include tablette {
        padding: map-get($decalage-pages, tablette) 0;

        @if $ajuster-contenu {
            padding: map-get($decalage-pages, tablette) * 1.5 0;
        }
    }

    @include ordinateur {
        height: unset;
        min-height: 130vh;
        padding: map-get($decalage-pages, ordinateur) 0;

        & > .titre {
            padding-left: 10%;
        }

        @if $ajuster-contenu {
            padding: map-get($decalage-pages, ordinateur) * 1.5 0;
        }
    }

    @if $padding-bottom == false {
        padding-bottom: 0 !important;
    }
}


// ===== MIXINS DE REQUÊTES MÉDIAS =====


@mixin petit-mobile {
    @media screen and (max-width: map-get($largeurs-ecran, mobile)) {
        @content;
    }
}

@mixin mobile {
    @media screen and (min-width: map-get($largeurs-ecran, mobile)) {
        @content;
    }
}

@mixin max-mobile {
    @media screen and (max-width: map-get($largeurs-ecran, tablette)) {
        @content;
    }
}

@mixin tablette {
    @media screen and (min-width: map-get($largeurs-ecran, tablette)) {
        @content;
    }
}

@mixin ordinateur {
    @media screen and (min-width: map-get($largeurs-ecran, ordinateur)) {
        @content;
    }
}

@mixin ordinateur-large {
    @media screen and (min-width: map-get($largeurs-ecran, ordinateur-large)) {
        @content;
    }
}


// ===== MIXINS DE SÉLECTION =====



@mixin selection-texte() {
    h1, h2, h3, h4, h5, h6, p, a {
        @content;
    }
}

// Sélectionne le premier et le dernier enfant pour leur appliquer un padding gauche et droit, respectivement
@mixin premier-dernier($propriete, $valeur, $valeur-2: -1, $axe: 'h') {
    @if $axe == 'h' {
        &:first-child {
            #{$propriete}-left: $valeur;
        }
    
        @if $valeur-2 >= 0 {
            &:last-child {
                #{$propriete}-right: $valeur-2;
            }
        }
    
        @else {
            &:last-child {
                #{$propriete}-right: $valeur;
            }
        }
    }

    @else if $axe == 'v' {
        &:first-child {
            #{$propriete}-top: $valeur;
        }
    
        @if $valeur-2 >= 0 {
            &:last-child {
                #{$propriete}-bottom: $valeur-2;
            }
        }
    
        @else {
            &:last-child {
                #{$propriete}-bottom: $valeur;
            }
        }
    }
}

// Prend un sélecteur et l'effectue en tant que lui-même et la sélection de son enfant
// avec ce même sélecteur
@mixin selection-enfant-et-soi($selecteur) {
    &#{$selecteur},
    & #{$selecteur} {
        @content;
    }
}