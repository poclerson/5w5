@import './fonctions.scss';
@import './variables.scss';
 


// ===== MIXINS DE TEXTE =====



// Transforme une map de textes et génère des media queries
@mixin texte-dynamique($selecteurs) {
    @each $selecteur, $tailles-ecran in $selecteurs {
        @each $taille-ecran, $proprietes in $tailles-ecran {
            @media screen and (min-width: $taille-ecran) {
                #{$selecteur} {
                    font-size: map-get($proprietes, taille);
                    margin-block-start: map-get($proprietes, taille) / 2;
                    margin-block-end: map-get($proprietes, taille) / 2;

                    // Ajouter les propriétés ajoutées dans variables.scss ici
                    // $proprietes représente toutes les propriétés présentes (présentement, taille et hauteur-ligne)
                }
            }
        }
    }
}

// Remlpit automatiquement les informations génériques pour tout type de texte
// Fonctionne avec themer()
@mixin texte-general($theme, $element) {
    color: map-deep-get($theme, $element, "couleur");
    font-weight: map-deep-get($theme, $element, "poids");
    font-style: map-deep-get($theme, $element, "style");
}

@mixin desactiver-margin-block() {
    margin-block-start: 0;
    margin-block-end: 0;
}



// ===== MIXINS DE COULEUR =====



// Stylise plusieurs classe/balises prédéterminés d'après une map de thème
@mixin themer($theme) {
    // Styles de texte
    .titre {
        @include texte-general($theme, "titre");
    }

    .sous-titre {
        @include texte-general($theme, "sous-titre");
    }

    .Icone {
        color: map-deep-get($theme, "icone", "couleur");
    }

    p {
        @include texte-general($theme, "texte");
    }

    a {
        @include texte-general($theme, "lien");

        &:hover {
            @include texte-general($theme, "lien-hover");
        }
    }

    // Boites
    background-color: map-deep-get($theme, "fond", "couleur-primaire");
}

/*
    Permet de faire un fondu entre des degrades ou des images
    Demande qu'un élément vide ayant la classe "classe-destination" soit dans le conteneur de base
    et que l'attribut transition change sur le conteneur original, le temps de l'animation
*/
@mixin fondu($duree, $classe-destination) {
    position: relative;
    background-size: 100% 100%;
    background-repeat: no-repeat;

    .#{$classe-destination} {
        content: "";
        position: absolute;
        top:0;
        left:0;
        @include pleine-taille;
        background-size: 100% 100%;
        background-repeat: no-repeat;
        opacity: 0;
        @content;
    }

    &[transition="1"] {
        .#{$classe-destination} {
            animation: fondu-sortant $duree forwards;
        }
    }
}


/*
    Attribue la bonne couleur reliée à un domaine (dans la map $couleurs)
    Le domaine doit être pareil à la classe donnée à l'élément

    $classes-proprietes-map contient une map qui fait correspondre des classes enfant
    de l'élément principal à des propriétés CSS (color, background-color, etc)

    Si on passe une clé se nommant 'soi' dans $classes-proprietes-map, la propriété sera appliquée à l'élément lui-même
*/
@mixin couleurs-domaines($classes-proprietes-map) {
    // Itérer chaque classe enfant/propriété dans la map reçue
    @each $classe, $propriete in $classes-proprietes-map {

        // Itérer chaque couleur disponible dans les domaines
        @each $domaine, $couleur in map-get($couleurs, domaines) {
            @if ($classe == 'soi') {
                &.#{$domaine} {
                    #{$propriete}: $couleur;
                }
            }

            @else {
                // L'élément original doit avoir une classe correspondant aux différents domaines (voir Enseignant.scss pour exemple)
                &.#{$domaine} {

                    // Sélection de la classe enfant
                    .#{$classe} {

                        // Application de la couleur à la propriété
                        #{$propriete}: $couleur;
                    }
                }
            }
        }
    }
}



// ===== MIXINS RANDOMS =====



// Gère l'ouverture de différentes boites d'après des classes
// Insérer dans la boite à ouvrir/fermer
@mixin gerer-ouverture($valeur-quand-ouvert) {
    &.ouvert {
        display: $valeur-quand-ouvert;
    }

    &.ferme {
        display: none;
    }
}

@mixin pleine-taille() {
    width: 100%;
    height: 100%;
}

// Cache la barre de défilement par défaut des browsers
@mixin cacher-barre-defilement() {
    &::-webkit-scrollbar {
        display: none;
    }

    -ms-overflow-style: none;
    scrollbar-width: none;
}

// Crée un flou gaussien pour flouter le fond
@mixin fond-flou() {
    backdrop-filter: blur(4px);
}

@mixin rond($taille) {
    content: "";
    border-radius: 50%;
    width: $taille;
    height: $taille;
}



// ===== MIXINS DE SECTIONS =====



// Bulle avec le coin bas droit plus prononcé. Comprend une image
@mixin bulle() {
    aspect-ratio: 1;
    border-radius: 50% 50% 10px 50%;

    img {
        width: 100%;
        height: 100%;
    }
}

@mixin carte() {
    border-radius: 20px;

    $padding-v: 5vh;
    $padding-h: 5vw;

    @include tablette {
        $padding-h: 2.5vh;
        $padding-v: 2.5vw;
    }

    padding-top: $padding-v;
    padding-bottom: $padding-v;
    padding-left: $padding-h;
    padding-right: $padding-h;
}

@mixin bordures-coins-diagonales($taille, $couleur) {
    background:
        // Gauche
        linear-gradient($couleur $taille, transparent 0 calc(100% - $taille)) 0 0 / 4px 100%,
        // Droite
        linear-gradient(transparent 0 calc(100% - $taille), $couleur 0) 100% 0 / 4px 100%,
        // Haut
        linear-gradient(to right, $couleur $taille, transparent 0 calc(100% - $taille)) 0 0 / 100% 4px,
        // Bas
        linear-gradient(to right, transparent 0 calc(100% - $taille), $couleur 0) 0 100% / 100% 4px
    ;
  background-repeat: no-repeat;
}


// ===== MIXINS DE REQUÊTES MÉDIAS =====



@mixin mobile {
    @media screen and (min-width: map-get($largeurs-ecran, mobile)) {
        @content;
    }
}

@mixin tablette {
    @media screen and (min-width: map-get($largeurs-ecran, tablette)) {
        @content;
    }
}

@mixin ordinateur {
    @media screen and (min-width: map-get($largeurs-ecran, ordinateur)) {
        @content;
    }
}

@mixin ordinateur-large {
    @media screen and (min-width: map-get($largeurs-ecran, ordinateur-large)) {
        @content;
    }
}